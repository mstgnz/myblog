// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env.local("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  firstname String
  lastname  String
  email     String   @unique
  password  String
  phone     String?  @db.VarChar(20)
  logo      String?
  code      String?
  active    Boolean  @default(true)
  last_login DateTime @default(now())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  blogs     Blog[]
}

model Category {
  id        String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  parent_id String?    @db.Uuid
  name      String
  parent    Category?  @relation("CategoryToCategory", fields: [parent_id], references: [id], onDelete: SetNull)
  children  Category[] @relation("CategoryToCategory")
  blogs     Blog[]
}

model Blog {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title       String
  slug        String    @unique
  short_text  String    @db.Text
  long_text   String    @db.Text
  user_id     String    @db.Uuid
  category_id String    @db.Uuid
  active      Boolean   @default(true)
  read_count  Int       @default(0) @db.SmallInt
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [category_id], references: [id], onDelete: Cascade)
  comments    Comment[]
}

model Comment {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  blog_id   String   @db.Uuid
  firstname String
  lastname  String
  comment   String   @db.Text
  active    Boolean  @default(true)
  created_at DateTime @default(now())
  blog      Blog     @relation(fields: [blog_id], references: [id], onDelete: Cascade)
}

model About {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String
  content      String   @db.Text
  display_order Int
  is_visible   Boolean  @default(true)
  created_at   DateTime @default(now())
}

model Contact {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fullname  String
  email     String
  subject   String
  message   String   @db.Text
  status    String   @default("pending") @db.VarChar(50)
  created_at DateTime @default(now())
}
