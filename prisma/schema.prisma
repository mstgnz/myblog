generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id         Int       @id @default(autoincrement())
  firstname  String    @db.VarChar(255)
  lastname   String    @db.VarChar(255)
  email      String    @db.VarChar(255) @unique
  password   String    @db.VarChar(255)
  phone      String?   @db.VarChar(20)
  logo       String?   @db.VarChar(255)
  code       String?   @db.VarChar(50)
  active     Boolean   @default(true)
  last_login DateTime  @default(now())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  blogs      blogs[]
}

model categories {
  id        Int          @id @default(autoincrement())
  parent_id Int?
  name      String       @db.VarChar(255)
  blogs     blogs[]
  parent    categories?  @relation("CategoryToCategory", fields: [parent_id], references: [id])
  children  categories[] @relation("CategoryToCategory")
  
  @@index([parent_id], name: "categories_parent_id_idx")
}

model blogs {
  id          Int         @id @default(autoincrement())
  title       String      @db.VarChar(255)
  slug        String      @db.VarChar(255) @unique
  short_text  String      @db.Text
  long_text   String      @db.Text
  user_id     Int
  category_id Int
  active      Boolean     @default(true)
  read_count  Int         @default(0) @db.SmallInt
  created_at  DateTime    @default(now())
  updated_at  DateTime    @default(now()) @updatedAt
  category    categories  @relation(fields: [category_id], references: [id], onDelete: Cascade)
  user        users       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  comments    comments[]

  @@index([user_id], name: "blogs_user_id_idx")
  @@index([category_id], name: "blogs_category_id_idx")
}

model comments {
  id         Int      @id @default(autoincrement())
  blog_id    Int
  firstname  String   @db.VarChar(255)
  lastname   String   @db.VarChar(255)
  comment    String   @db.Text
  active     Boolean  @default(true)
  created_at DateTime @default(now())
  blog       blogs    @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  
  @@index([blog_id], name: "comments_blog_id_idx")
}

model abouts {
  id            Int      @id @default(autoincrement())
  title         String   @db.VarChar(255)
  content       String   @db.Text
  display_order Int
  is_visible    Boolean  @default(true)
  created_at    DateTime @default(now())
}

model contacts {
  id         Int      @id @default(autoincrement())
  fullname   String   @db.VarChar(255)
  email      String   @db.VarChar(255)
  subject    String   @db.VarChar(255)
  message    String   @db.Text
  status     String   @default("pending") @db.VarChar(50)
  created_at DateTime @default(now())
}
